source assem.tcl

# Measured update rate
set freq 151.690; # in Hz

# ROM routines
    .equ SVNSEG 0x7c10;		# Seven-seg table
    .equ DISPRESH 0x7c7b;	# Display update
    .equ KEYHEX 0x7ce4;		# Get key as hex digit
    .equ R7SEG 0x7d03;		# Convert hex digit to seven-seg
    .equ GETKEY 0x7c20;		# Get key as scan code

# PIA addresses
    .equ PORTA 0x4000
    .equ PORTB 0x4001
    .equ CTRLA 0x4002
    .equ CTRLB 0x4003

# The clock uses two counters: a high-speed one that counts in units
# of 2^{-32} seconds and overflows once per second, and a slow-speed
# one that counts in seconds.  The software has a main loop that takes
# a fixed number of clock cycles, and increments the high-speed
# counter by the appropriate amount in each iteration; when the
# counter overflows, one second is added to the slow-speed counter,
# and the remainder is kept to contribute to the next second.  The
# slow-speed counter keeps the time in the format HHMMSS, with the
# digits represented in BCD.

    .equ dbuf 0x7a
    .equ time 0x62
    .equ jiffy 0x66
    .equ tmpX 0x6a

    .equ . 0x1000

start:
    ld SP #0x40

# Prompt for a time
    clr A
    st A dbuf;			# Clear display buffer
    st A dbuf+1
    st A dbuf+2
    st A dbuf+3
    st A dbuf+4
    ld A #0x19; 		# Three horizontal lines
    st A dbuf+5

    ld X #dbuf
    ld B #2
    jsr digit; 			# Tens of hours -- up to 2
    asl A
    asl A
    asl A
    asl A
    st A time
    ld B #9
    cmp A #0x20
    blt small
    ld B #3
small:
    jsr digit; 			# Units of hours -- up to 9 or 3
    add A time
    st A time

    ld B #5
    jsr digit; 			# Tens of minutes -- up to 5
    asl A
    asl A
    asl A
    asl A
    st A time+1
    ld B #9
    jsr digit; 			# Units of minutes -- up to 9
    add A time+1
    st A time+1

    .equ IKEY 0x32

waiti:
# Wait for the I key to be pressed
    jsr GETKEY
    cmp A #IKEY
    bne waiti

# Clear out seconds and the fast counter
    clr A
    st A jiffy
    st A jiffy+1
    st A jiffy+2
    st A jiffy+3
    st A time+2

loop:
# The timing loop for the clock.  We rely on the loop taking the same
# number of cycles every time, so we need to be very careful with
# conditional branches.

# Calculate the bytes of the increment from the measured update rate
set inc [expr {1.0 / $freq}]
# puts stderr $inc
set inc [expr {$inc * 256.0}]; set inc3 [expr {int($inc)}]
set inc [expr {($inc - $inc3) * 256.0}]; set inc2 [expr {int($inc)}]
set inc [expr {($inc - $inc2) * 256.0}]; set inc1 [expr {int($inc)}]
set inc [expr {($inc - $inc1) * 256.0}]; set inc0 [expr {int($inc+0.5)}]
# puts stderr [expr {((($inc0/256.0+$inc1)/256.0+$inc2)/256.0+$inc3)/256.0}]

# Increment the high-speed counter byte by byte
    ld A jiffy+3
    add A #$inc0
    st A jiffy+3
    ld A jiffy+2
    adc A #$inc1
    st A jiffy+2
    ld A jiffy+1
    adc A #$inc2
    st A jiffy+1
    ld A jiffy
    adc A #$inc3
    st A jiffy

# Increment the slow-speed counter according to the C flag
    ld X #time+2
    ld B #0x60
    bsr inc
    dec X
    ld B #0x60
    bsr inc
    dec X
    ld B #0x24
    bsr inc

# Convert the time to 7 segment codes
    ld A time
    bsr convL
    st A dbuf
    ld A time
    bsr convR
    st A dbuf+1
    ld A time+1
    bsr convL
    st A dbuf+2
    ld A time+1
    bsr convR
    st A dbuf+3
    ld A time+2
    bsr convL
    st A dbuf+4
    ld A time+2
    bsr convR
    st A dbuf+5
    jsr DISPRESH; # Refresh the display

# Output a sync pulse for calibration
    clr A
    st A CTRLA;			# Address DDRA
    ld B #0x80
    st B PORTA;			# High-order bit as output
    ld B #0x4
    st B CTRLA;			# Address PORTA
    st A PORTA;			# Force the bit low

    bra loop

inc:
# Add the C flag to the BCD byte at (X), with overflow at B
    ld A (X); 			# Fetch the byte from (X)
    adc A #0;			# Perform the increment
    daa;                	# Adjust for BCD
    cmp A B;			# Now see if we have reached the value in B
    rol B;			# Put C flag in bottom of B
    and B #1;			# Isolate the flag -- 1 if OK or 0 if reached
    neg B;			# Extend to all of B -- 0xff or 0
    and A B;			# Reset A -- undocumented instruction!
    st A (X);			# Save the result
    sub B #1;			# Set C if B=0
    rts

# The ROM routines L7SEG and R7SEG are unusable because of variable timing

convL:
# Convert high-order digit of A to seven seg code
    asr A
    asr A
    asr A
    asr A
# Fall through

convR:
# Convert low-order digit of A to seven seg code
    and A #0xf
    add A #lo(SVNSEG)
    st A tmpX+1
    ld A #hi(SVNSEG)
    st A tmpX
    ld X tmpX
    ld A (X)
    rts

digit:
# Get a digit as a keypress; limit in B; update display at (X)
    push B
    jsr KEYHEX
    pop B
    cmp A B
    bgt digit
    push A
    jsr R7SEG
    st A (X)
    inc X
    pop A
    rts

fixup; output-c
